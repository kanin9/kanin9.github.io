I" <p><em>Haha goose say funny thing</em></p>

<p><a href="https://ctf2022.maplebacon.org/files/0565426a10b6e02a4fd2dcc6ca720ab0/honksay.tar.gz">Download challenge</a></p>

<p><br /></p>

<h2 id="investigation">Investigation</h2>

<p>Honksay challenge presents itself with this glorious page</p>

<p><img src="/assets/honksay.png" alt="honk" />
<br />
<br /></p>

<p>Looking onto its code we see that websiteâ€™s backend has a goose script, where a puppeteer instance is created. This instance visits every page you specify in feedback field and sets flag cookie to environment variable. The only obstacle is that cookie is only visible for localhost.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">puppeteer</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">puppeteer</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">FLAG</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">FLAG</span> <span class="o">||</span> <span class="dl">"</span><span class="s2">maple{fake}</span><span class="dl">"</span><span class="p">;</span>

<span class="p">...</span>

<span class="nx">page</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">browser</span><span class="p">.</span><span class="nx">newPage</span><span class="p">();</span>
<span class="k">await</span> <span class="nx">page</span><span class="p">.</span><span class="nx">setCookie</span><span class="p">({</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">flag</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">value</span><span class="p">:</span> <span class="nx">FLAG</span><span class="p">,</span>
      <span class="na">domain</span><span class="p">:</span> <span class="dl">'</span><span class="s1">localhost</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">samesite</span><span class="p">:</span> <span class="dl">'</span><span class="s1">none</span><span class="dl">'</span>
<span class="p">});</span>
<span class="k">await</span> <span class="nx">page</span><span class="p">.</span><span class="nx">goto</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="p">{</span><span class="na">waitUntil</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">networkidle2</span><span class="dl">'</span> <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">));</span>
</code></pre></div></div>

<p>Digging in the other script reveals that website has <code class="language-plaintext highlighter-rouge">/changehonk</code> route that can set our message on the frontend.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>app.get('/changehonk', (req, res) =&gt; {
    res.cookie('honk', req.query.newhonk, {
        httpOnly: true
    });
    res.cookie('honkcount', 0, {
        httpOnly: true
    });
    res.redirect('/');
});
</code></pre></div></div>

<p>Well that is nothing like stored XSS, except there is one problem : upon visiting baseurl backend performs a little check with â€˜xssâ€™ plugin</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const clean = require('xss');

...

app.get('/', (req, res) =&gt; {
    if (req.cookies.honk){
        //construct object
        let finalhonk = {};
        if (typeof(req.cookies.honk) === 'object'){
            finalhonk = req.cookies.honk
        } else {
            finalhonk = {
                message: clean(req.cookies.honk), 
                amountoftimeshonked: req.cookies.honkcount.toString()
            };
        }
        res.send(template(finalhonk.message, finalhonk.amountoftimeshonked));
    } else {
        const initialhonk = 'HONK';
        res.cookie('honk', initialhonk, {
            httpOnly: true
        });
        res.cookie('honkcount', 0, {
            httpOnly: true
        });
        res.redirect('/');
    }
});
</code></pre></div></div>

<p>Turns out we can get around this check, by setting our cookie to an instance of object, and then finalhonk value will get every property of honk cookie without any check.</p>

<h2 id="payload">Payload</h2>

:ET